from exploitability.utility.freezable_policy import FreezableModularPolicy
from gym import spaces
from ray.rllib.models.catalog import MODEL_DEFAULTS
from copy import deepcopy
import pdb
import numpy as np

REDUNDANT_MOVES = 6
NUM_GAME_SPACES = 9
BATCH_SIZE = 12

if __name__ == "__main__":
    config = deepcopy(MODEL_DEFAULTS)
    config["custom_options"]["core_trainable"] = True
    config["custom_options"]["redundant_trainable"] = True
    config["custom_options"]["num_redundant_moves"] = REDUNDANT_MOVES
    config["custom_options"]["num_game_spaces"] = NUM_GAME_SPACES
    config["custom_options"]["core_policy_hiddens"] = [50, 25]
    config["custom_options"]["redundant_policy_hiddens"] = [100, 25]

    # This is a made up observation space I should TODO fix because RLLib passes in a box
    #obs_space = spaces.MultiDiscrete([2 for _ in range((2*REDUNDANT_MOVES + 1)*NUM_GAME_SPACES + 1)])
    obs_space = spaces.Box(low=-1, high=1, shape=((2*REDUNDANT_MOVES + 1)*NUM_GAME_SPACES + 1, ))
    act_space = spaces.MultiDiscrete([10, REDUNDANT_MOVES])

    model = FreezableModularPolicy(obs_space=obs_space, action_space=act_space,
                                   num_outputs=NUM_GAME_SPACES+REDUNDANT_MOVES+1,
                                   model_config=config, name="freezable_policy")
    test_obs = np.array([obs_space.sample() for _ in range(BATCH_SIZE)])
    actions, state = model.forward({"obs_flat": test_obs}, state=None, seq_lens=None)
