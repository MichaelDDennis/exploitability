from freezable_policy import FreezableModularPolicy
from gym import spaces
from ray.rllib.models.catalog import MODEL_DEFAULTS
from copy import deepcopy
import pdb
import numpy as np

REDUNDANT_MOVES = 6

if __name__ == "__main__":
    config = deepcopy(MODEL_DEFAULTS)
    # train_core_policy = model_config.get("core_trainable")
    # train_redundant_policy = model_config.get("redundant_trainable")
    # num_redundant_moves = model_config.get("num_redundant_moves")
    # num_game_spaces = model_config.get("num_game_spaces", 9)
    # core_policy_hiddens = model_config.get("core_net_hiddens")
    # redundant_policy_hiddens = model_config.get("redundant_net_hiddens")
    config["core_trainable"] = True
    config["redundant_trainable"] = True
    config["num_redundant_moves"] = REDUNDANT_MOVES
    config["num_game_spaces"] = 9
    config["core_policy_hiddens"] = [50, 25]
    config["redundant_policy_hiddens"] = [100, 25]

    obs_space = spaces.MultiDiscrete([2 for _ in range((2*REDUNDANT_MOVES + 1)*9 + 1)])
    act_space = spaces.MultiDiscrete([9, REDUNDANT_MOVES])

    model = FreezableModularPolicy(obs_space=obs_space, action_space=act_space, num_outputs = 9+REDUNDANT_MOVES,
                                   model_config=config, name="freezable_policy")
    test_obs = np.array([obs_space.sample() for _ in range(12)])
    actions, state = model.forward({"obs_flat": test_obs}, state=None, seq_lens=None)
    pdb.set_trace()