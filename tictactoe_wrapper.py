from gym_tictactoe.env import TicTacToeEnv, tocode
from ray.rllib.env.multi_agent_env import MultiAgentEnv

from gym.spaces import Discrete, Tuple


class MultiAgentTicTacToe(MultiAgentEnv):

    def __init__(self):
        self._inner_env = TicTacToeEnv()
        self.observation_space = Tuple([Discrete(3) for _ in range(10)])
        self.action_space = Discrete(10)
        self._obs_outer = None

    def reset(self):
        obs = self._inner_env.reset()
        self._obs_outer = list(obs[0])
        self._obs_outer.append(tocode(obs[1]))
        return {0: self._obs_outer, 1: self._obs_outer}

    def _get_mover(self):
        return self._obs_outer[9]-1

    def _get_other(self, player):
        return 0 if player == 1 else 1

    def _get_non_mover(self):
        return self._get_other(self._get_mover())

    def _get_end(self, loser):
        return {0: self._obs_outer, 1: self._obs_outer}, \
               {loser: -1, self._get_other(loser): 1}, \
               {'__all__': True}, \
               {0: {}, 1: {}}

    def step(self, action_dict):
        if action_dict[self._get_non_mover()] != 9:
            return self._get_end(self._get_non_mover())  # played out of turn

        if action_dict[self._get_mover()] == 9:
            return self._get_end(self._get_mover())  # no op on own move

        if self._obs_outer[action_dict[self._get_mover()]] != 0:

            return self._get_end(self._get_mover())  # played on taken spot
            #TODO handel case when there are no more moves left

        obs, rewards, dones, infos = self._inner_env.step(action_dict[self._get_mover()])

        #TODO Check if there is a bug in the tictactoe code on line 136

        #if rewards is not 0:
            #print(rewards)
            #print(self._get_mover())
            #self._inner_env.render()

        # first tab is this
        # second tab is mover moved down

        mover = self._get_mover()

        self._obs_outer = list(obs[0])
        self._obs_outer.append(tocode(obs[1]))



        ret = {0: self._obs_outer, 1: self._obs_outer}, \
        {mover: rewards, self._get_other(mover): -rewards}, \
        {'__all__': dones}, \
        {0: {}, 1: {}}



        return ret

    def render(self):
        self._inner_env.render()
