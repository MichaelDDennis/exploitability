from sacred import Experiment
from sacred.observers import FileStorageObserver
from marl_training import SAVE_DIR as TRAINING_SAVE_DIR
import json

import matplotlib.pyplot as plt
import pandas as pd

from pathlib import Path

SAVE_DIR = "graph_generation"

ex = Experiment("graph_generation")
ex.observers.append(FileStorageObserver(SAVE_DIR))


def plot_reward_traces(reward_traces_df, colors={"A": 'r', "B": 'g'}):
    print(reward_traces_df.index)
    for k, p in reward_traces_df.index:
        if k == 0:
            reward_traces_df.loc[(k, p), :].plot(color=colors[p], label=str(p))
        else:
            reward_traces_df.loc[(k, p), :].plot(color=colors[p], label='_nolegend_')
    plt.legend()


def plot_traces(trace_df):
    trace_df.plot(color='r', label="rest")
    plt.legend()

@ex.config
def default_config():
    training_dir = TRAINING_SAVE_DIR
    #feature_to_graph = ["episode_len_mean"]
    #feature_to_graph = ["custom_metrics", "broke_rules_mean"]
    #feature_to_graph = ["custom_metrics", "agent1_policy_broke_rules_mean"]
    #feature_to_graph = ["custom_metrics", "agent2_policy_total_wins_mean"]
    feature_to_graph = ["custom_metrics", "ties_mean"]
    image_dir_loc = 'images'


@ex.automain
def my_main(_run, target_run_id, training_dir, feature_to_graph, image_dir_loc):
    results_file_name = training_dir + "/" + str(target_run_id) + "/rllib/result.json"

    with open(results_file_name) as results_file:
        data = []
        for result_line in results_file:
            result = json.loads(result_line)
            for k in feature_to_graph:
                result = result[k]

            data.append(result)

        data_dic = {"test": data}
        print(data)

    rewards_df = pd.DataFrame(data_dic)

    plot_traces(rewards_df)
    image_loc = image_dir_loc + "/" + str(_run._id) + ".png"

    Path(image_dir_loc).mkdir(parents=True, exist_ok=True)

    plt.savefig(image_loc)
    ex.add_artifact(image_loc)
