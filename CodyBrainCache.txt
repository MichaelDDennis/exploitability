The state of my understanding of how you embed a custom-defined Model class in a RLLib training run.
- Models are responsible for the input-output-mapping part of policies
- Custom models need to inherit from the ModelV2 class, and implement both a __init__(obs_space, action_space, num_outputs, model_config, name) and
a forward(input_dict) method.
- A Trainer object takes in a dictionary, `policies` that maps between a string key and a tuple of arguments
for constructing a policy (PolicyCls, obs_space, act_space, config_dict). This is passed into build_tf_policy, which
dynamically constructs a Policy object, which is initialized somewhere in the workers.
- build_tf_policy creates a class that inherits from DynamicTFPolicy, and within the init of that it calls
ModelCatalog.get_model_v2(). This method will either construct a default model or instantiate a custom one if you pass it in.
- As far as I can tell, a custom model is passed into ModelCatalog.get_model_v2() by putting its class into config["model"]["custom_model"].
- Any arguments you want passed into the custom model upon construction can be set in config["model"]; this model_config dictionary will be passed in when your
model class is instantiated, along with the other __init__ parameters listed above.
- My current plan is to define a model class that can do different things at initialization based on the parameters
config["model"]["core_trainable"] and config["model"]["redundant_trainable"], both of which are boolean. Both being true means
both parts of the network are trainable, and either one being false means that part of the network will be set to trainable=False.

- One confusion I still have is: which config do I pass the model information into? The dictionary that makes up the four-object tuple of
policy creation that goes within the policies dict? (this is my best guess) Or the config defined within Trainer creation?
The config containing model info needs to eventually be passed into DynamicTFPolicy() when that object is constructed,
but I'm a bit confused about where that call actually happens.